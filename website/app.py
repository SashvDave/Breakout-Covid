# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NcLAHn3af6eFwpYWWt_GtQNYzT_2Nkbh
"""

import pandas as pd
import numpy as np

import flask
from flask import Flask, render_template, request, redirect

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from keras.utils import np_utils
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import LabelEncoder 
from sklearn import datasets
from sklearn.cluster import KMeans
from sklearn.manifold import TSNE

from numpy import array
from numpy import argmax
from keras.utils import to_categorical

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')



name_array = []
business_array = []
email_array = []
location_array = []

cases_array = []
hospitalized_array = []
ICU_array = []
ventilator_array = []


@app.route('/send', methods=['GET', 'POST'])
def send():

    if request.method == "POST":

        req = request.form
        # print(req)

        name = req.get("name")
        name_array.append(name)
        name_array[0] = name

        business = req.get("business")
        business_array.append(business)
        business_array[0] = business
    

        email = req.get("email")
        email_array.append(email)
        email_array[0] = email


        location = req.get("location")
        location_array.append(location)
        location_array[0] = location

        cases = req.get("cases")
        cases_array.append(cases)
        cases_array[0] = cases

        hospitalized = req.get("hospitalized")
        hospitalized_array.append(hospitalized)
        hospitalized_array[0] = hospitalized

        ICU = req.get("ICU")
        ICU_array.append(ICU)
        ICU_array[0] = ICU

        ventilator = req.get("ventilator")
        ventilator_array.append(ventilator)
        ventilator_array[0] = ventilator

        message = req.get("message")
        
        print(message)


        # ML PROGRAM SECTION


        df = pd.read_csv('daily.csv')

        def clean_dataset(df):
            assert isinstance(df, pd.DataFrame), "df needs to be a pd.DataFrame"
            df.dropna(inplace=True)
            indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)
            return df[indices_to_keep].astype(np.float64)

        le = LabelEncoder() 
        
        df['state']= le.fit_transform(df['state'])
        df.replace("+", "")

        df = df.drop(columns="dataQualityGrade")
        df = df.drop(columns="pending")
        df = df.drop(columns="recovered")
        df = df.drop(columns="negative")
        df = df.drop(columns="hospitalized")
        df = df.drop(columns="totalTestsViral")
        df = df.drop(columns="positiveTestsViral")
        df = df.drop(columns="negativeTestsViral")

        df = df.drop(columns="positiveCasesViral")
        df = df.drop(columns="deathConfirmed")
        df = df.drop(columns="deathProbable")

        df = df.drop(columns="posNeg")
        df = df.drop(columns="deathIncrease")
        df = df.drop(columns="hospitalizedIncrease")



        df = df.drop(columns="totalTestResults")
        df = df.drop(columns="totalTestResultsIncrease")

        df.dropna()

        clean_dataset(df)

        df.head()

        model = KMeans(n_clusters=3)
        model.fit(df)

        predictions = model.predict(df)

        Prediction = model.predict([[3, cases, hospitalized, 7500, ICU, 750, 500, 300, 2000, 1500, 500, 550000]])

        print(Prediction[0])

        if(Prediction[0] == 0):
            return render_template('low.html')

        if(Prediction[0] == 1):
            return render_template('medium.html')

        if(Prediction[0] == 2):
            return render_template('high.html')


        return redirect(request.url)

    return render_template('index.html')


# @app.route("/upload-image", methods=["GET", "POST"])
# def upload_image():

#     if request.method == "POST":

#         if request.files:

#             image = request.files["file_image"]

#             image.save(os.path.join(app.config["IMAGE_UPLOADS"], "" + email_array[0] + ".png"))

#             print(image)

#             return redirect(request.url)


#     print("[INFO] loading model...")
#     model = load_model(config.MODEL_PATH)

#     # grab the paths to the fire and non-fire images, respectively
#     print("[INFO] predicting...")
#     firePaths = list(paths.list_images(config.FIRE_PATH))
#     nonFirePaths = list(paths.list_images(config.SAMPLE_FIRE_PATH))


#     imagePaths = nonFirePaths
#     random.shuffle(imagePaths)
#     imagePaths = imagePaths[:config.SAMPLE_SIZE]

#     # loop over the sampled image paths
#     for (i, imagePath) in enumerate(imagePaths):
#         # load the image and clone it
#         image = cv2.imread(imagePath)
#         output = image.copy()

#         # resize the input image to be a fixed 128x128 pixels, ignoring
#         # aspect ratio
#         image = cv2.resize(image, (128, 128))
#         image = image.astype("float32") / 255.0
            
#         # make predictions on the image
#         preds = model.predict(np.expand_dims(image, axis=0))[0]
#         j = np.argmax(preds)
#         label = config.CLASSES[j]

#         # draw the activity on the output frame
#         # text = label if label == "Non-Fire" else "Fire"

#         if label == "Non-Fire":
#             text = "Non-Fire"

#         else:

#             text = "Fire"

#             yag = yagmail.SMTP('contact.firehawk@gmail.com', 'fire246810')
#             # contents = ["Latitude: " + lat_array[0] + "\nLongitude: " + longitude_array[0] + "\nDescription: " + description_array[0], '/Users/samarth/Downloads/Flexor/static/result_img/' + email_array[0] + '.png']
#             contents = ["Latitude: " + lat_array[0] + "\nLongitude: " + longitude_array[0] + "\nDescription: " + description_array[0], '~firehawk/public_html/static/result_img' + email_array[0] + '.png']
#             yag.send('contact.firehawk@gmail.com', email_array[0], contents)
#             yag.send(email_array[0], "Confirmation Email", "We will be processing your form!")

#             # i = i + 1

#             # email_array.clear()
#             # description_array.clear()
#             # lat_array.clear()
#             # longitude_array.clear()


#         output = imutils.resize(output, width=500)
#         cv2.putText(output, text, (35, 50), cv2.FONT_HERSHEY_SIMPLEX,
#             1.25, (0, 255, 0), 5)

#         # write the output image to disk	 
#         filename = "{}.png".format(i)
#         # filename = "" + output + ".png".format(i)
#         p = os.path.sep.join([config.OUTPUT_IMAGE_PATH, filename])
#         cv2.imwrite(p, output)

#     return render_template("index.html")



if __name__ == "__main__":
    app.debug = True
    app.run()
