# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NcLAHn3af6eFwpYWWt_GtQNYzT_2Nkbh
"""

import pandas as pd
import numpy as np
import torch as th
import seaborn as sb
import matplotlib.pyplot as plt


from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from keras.utils import np_utils
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import LabelEncoder 
from sklearn import datasets
from sklearn.cluster import KMeans
from sklearn.manifold import TSNE

import pickle

from numpy import array
from numpy import argmax
from keras.utils import to_categorical

df = pd.read_csv('daily.csv')
df.head()

def clean_dataset(df):
    assert isinstance(df, pd.DataFrame), "df needs to be a pd.DataFrame"
    df.dropna(inplace=True)
    indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)
    return df[indices_to_keep].astype(np.float64)

print(df.columns)
df.drop(columns='pending')

X = df.iloc[:, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]].values
states = X[:, 0]

le = LabelEncoder() 
  
df['state']= le.fit_transform(df['state'])
df.replace("+", "")
df = df.drop(columns="dataQualityGrade")
df = df.drop(columns="pending")
df.dropna()

clean_dataset(df)


df.head()

model = KMeans(n_clusters=3)
model.fit(df)

all_predictions = model.predict(df)

# x_axis = df[:]
# y_axis = df[:]
# plt.scatter(x_axis, y_axis)
# plt.show()

model_TSNE = TSNE(learning_rate=100)
transformed = model_TSNE.fit_transform(df)

all_predictions_TSNE = model.predict(df)

# x_axis_TSNE = transformed [:]
# y_axis_TSNE = transformed[:]
# plt.scatter(x_axis_TSNE, y_axis_TSNE)
# plt.show()

filename = 'finalized_model.sav'
pickle.dump(model, open(filename, 'wb'))

print(df.columns)



